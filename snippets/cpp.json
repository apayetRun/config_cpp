{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"cout on multiline":
	{
		"prefix": "cout",
		"body":
		[
			"std::cout",
			"<< $1,",
			"<< std::endl;"
		],
		"description": "print cout in multiple line",
	},
	"insert debug space":
	{
		"prefix": "endl",
		"body":
		[
			"std::cout << std::endl;"
		],
		"description": "Put endline inside the std::out"
	},
	"debug" :
	{
		"prefix": "debug",
		"body":
		[
			"if (DEBUG)",
			"\tstd::cout << \"$TM_FILENAME_BASE ${1:function_called} called\" << std::endl;",	
		],
		"description": "debug line for function call"
	},
	"impcpp":
	{
		"prefix":
		[
			"defcpp",
			"object-create",
			"object",
		],
		"body":
		[
			
			"class $TM_FILENAME_BASE ${1| ,: public ParentClassName,: private ParentClassName|}",
			"{",
			"\tprivate:",
			"\t\t",
			"\tpublic:",
			"\t\t$TM_FILENAME_BASE();",
			"\t\t$TM_FILENAME_BASE(const $TM_FILENAME_BASE & p_copy);",
			"\t\t~$TM_FILENAME_BASE();",
			"\t\t$TM_FILENAME_BASE &\toperator=(const $TM_FILENAME_BASE &rhs);",
			"};",
		],
		"description": "print cout in multiple line",
	},
	"defcpp":
	{
		"prefix":
		[
			"impcpp",
			"object-create",
			"object",
		],
		"body" :
		[
			"#include \"./$TM_FILENAME_BASE.hpp\"",
			"",
			"$TM_FILENAME_BASE::$TM_FILENAME_BASE()",
			"{",
			"\tif (DEBUG)",
			"\t\tstd::cout << \"$TM_FILENAME_BASE Default constructor called\" << std::endl;",
			"}",
			"$TM_FILENAME_BASE::$TM_FILENAME_BASE(const $TM_FILENAME_BASE & p_copy)",
			"{",
			"\tif (DEBUG)",
			"\t\tstd::cout << \"$TM_FILENAME_BASE Copy constructor called\" << std::endl;",
			"\t*this = p_copy;",
			"}",
			"$TM_FILENAME_BASE::~$TM_FILENAME_BASE()",
			"{",
			"\tif(DEBUG)",
			"\t\tstd::cout << \"$TM_FILENAME_BASE Destructor called\" << std::endl;",
			"}",
			"$TM_FILENAME_BASE &\t$TM_FILENAME_BASE::operator=($TM_FILENAME_BASE const &rhs)",
			"{",
			"\tif (DEBUG)",
			"\t\tstd::cout << \"$TM_FILENAME_BASE Copy assignement operator called\" << std::endl;",
			"\tif (this != &rhs)",
			"\t{",
			"\t\t $BLOCK_COMMENT_START this->setAtribute(rhs.getAtribute());$BLOCK_COMMENT_END",
			"\t}",
			"\treturn (*this);",
			"}",
		],
		"description": "implement cpp",
	}
}
